#!/bin/bash
#===-                           P L E B B L E
#===-                         https://plebble.us
#===-
#===-              Copyright (C) 2017-2022 root1m3@plebble.us
#===-
#===-                      GNU GENERAL PUBLIC LICENSE
#===-                       Version 3, 29 June 2007
#===-
#===-    This program is free software: you can redistribute it and/or modify
#===-    it under the terms of the GPLv3 License as published by the Free
#===-    Software Foundation.
#===-
#===-    This program is distributed in the hope that it will be useful,
#===-    but WITHOUT ANY WARRANTY; without even the implied warranty of
#===-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#===-
#===-    You should have received a copy of the General Public License
#===-    along with this program, see LICENCE file.
#===-    see https://www.gnu.org/licenses
#===-
#===----------------------------------------------------------------------------
#===-
#core1/snippet/build_job_make -> build_jobs/make.sh
cmd=$1
shift

if [[ ! -f lib/shenv ]]; then
    >&2 echo "KO 78964"
    exit 1
fi
. lib/shenv

if [[ ! -f lib/cbsenv ]]; then
    >&2 echo "KO 78965"
    exit 1
fi
. lib/cbsenv

echo "cpus=$jobs"

echo "DISTCC_HOSTS=$DISTCC_HOSTS"
if [[ ! -z "${CXX}" ]]; then
    if [[ ${CXX} = *"distcc g++" ]]; then
        let nc=$(echo "${DISTCC_HOSTS}" | wc -w)
        echo "nc=$nc"
        if [[ $nc -gt 0 ]]; then
            let jobs=$(echo "$jobs * $nc" | bc)
        fi
    fi
else
    CXX="g++"
fi
echo "CXX=$CXX"

echo "total concurrent jobs = $jobs"

function check_android_sdk { #Search K8750R3. SYNC android/make.sh
    sdkmanager=cmdline-tools/latest/bin/sdkmanager
    if [[ ! -f ~/android_sdk/$sdkmanager ]]; then
        echo "pruning old android_sdk"
        rm -r ~/android_sdk
    fi
    if [[ ! -d ~/android_sdk ]]; then
        echo "recreating android_sdk API 32"
        mkdir ~/android_sdk
        for c0dir in $(find . -type d -name "core0"); do
            cp $c0dir/us/android/licenses ~/android_sdk/ -R
            break
        done
        pushd ~/android_sdk >/dev/null
            sdktools=commandlinetools-linux-8512546_latest.zip
            wget https://dl.google.com/android/repository/$sdktools
            unzip $sdktools
            rm $sdktools
            #workaround problem
            mkdir cmdline-tools/latest
            mv cmdline-tools/* cmdline-tools/latest/
            $sdkmanager  "platform-tools"
            $sdkmanager "build-tools;33.0.0"  #Search R6Tr465. SYNC android/app/build.gradle
            $sdkmanager "platforms;android-32"
        popd >/dev/null
    fi
}

function mk_deps {
    echo "building deps"
    dest=deps
    rm $dest -rf
    mkdir -p $dest/$arch
    prefix=$(realpath $dest/$arch)
    branch=$(cat build_hashes | grep "^vhash " | sort | uniq | awk '{print $6}')
    echo "ec-secp256k1"
    pushd ec_src > /dev/null
        # ------------------------secp256k1
        pushd secp256k1 > /dev/null
            ./autogen.sh 2>&1
            #./configure --prefix ec --enable-experimental --enable-module-ecdh --disable-dependency-tracking --enable-benchmark=no  --enable-coverage=no --enable-tests=no --enable-openssl-tests=no --enable-exhaustive-tests=no
            #U.S. Patent No. 7,110,538 has expired. --enable-endomorphism=yes for sig verification 25% faster
            ./configure --prefix $prefix --enable-experimental --enable-module-ecdh --disable-dependency-tracking --enable-benchmark=no  --enable-coverage=no --enable-tests=no --enable-exhaustive-tests=no 2>&1
            ${make} -j$jobs CXX="$CXX" 2>&1
            r=$?
            if [[ $r -ne 0 ]]; then
                >&2 echo "KO 76033 make error"
                exit 1
            fi
            #./tests && (exit 1)
            ${make} install
            if [[ $r -ne 0 ]]; then
                >&2 echo "KO 76034 make install error"
                exit 1
            fi
            echo "installed secp at $prefix"
        popd > /dev/null
        rm -r secp256k1
    popd > /dev/null
    rm -r ec_src

    if [[ -d fcgi_src ]]; then
        echo "fcgi"
        pushd fcgi_src > /dev/null
            # ------------------------fastCGI RESTful interface
            pushd fastcgi++
                mkdir build
                pushd build
                    cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX:PATH=$prefix ..
                    r=$?
                    if [[ $r -ne 0 ]]; then
                        >&2 echo "KO 76021 make error"
                        exit 1
                    fi
                popd
                pushd build
                    ${make} -j$jobs
                    r=$?
                    if [[ $r -ne 0 ]]; then
                        >&2 echo "KO 76022 make error"
                        exit 1
                    fi
                    ${make} install
                    r=$?
                    if [[ $r -ne 0 ]]; then
                        >&2 echo "KO 76023 make error"
                        exit 1
                    fi
                    echo "installed fcgi at $prefix"
                popd > /dev/null
            popd > /dev/null
        popd > /dev/null
        rm -r fcgi_src
    else
        echo "fcgi not included"
    fi
    rm -r $branch
    rm -f make.sh
    mv build_hashes build_hashes_$arch
    echo "done deps. build_hashes_$arch"
}

function mvr2rdata {
    tder=$1
    mkdir -p r2r/home
    homes=$(find ${tder}/r2r -type d -name "home")
    echo "${tder}: Protocols with home data:"
    echo "${homes}"
    for d in ${homes}; do
        ph=$(dirname $d)
        P=$(cat ${ph}/makefile | grep "^PROT:=" | sed "s~^PROT:=\(.*\)~\1~")
        if [[ "_$P" == "_" ]]; then
            >&2 echo "KO 68576 makefile doesn't define PROT."
            exit 1
        fi
        R=$(cat ${ph}/makefile | grep "^R:=" | sed "s~^R:=\(.*\)~\1~")
        if [[ "_$R" == "_" ]]; then
            >&2 echo "KO 68577 makefile doesn't define R."
            exit 1
        fi
        mkdir -p r2r/home/${P}/${R}
        #echo "${d}/* r2r/home/${P}/${R}/"
        mv ${d}/* r2r/home/${P}/${R}/
    done

    mkdir -p r2r/html
    wwws=$(find ${tder}/r2r -type d -name "html")
    echo "${tder}: Protocols with landing page:"
    echo "${wwws}"
    for d in ${wwws}; do
        ph=$(dirname $d)
        P=$(cat ${ph}/makefile | grep "^PROT:=" | sed "s~^PROT:=\(.*\)~\1~")
        if [[ "_$P" == "_" ]]; then
            >&2 echo "KO 68576 makefile doesn't define PROT."
            exit 1
        fi
        R=$(cat ${ph}/makefile | grep "^R:=" | sed "s~^R:=\(.*\)~\1~")
        if [[ "_$R" == "_" ]]; then
            >&2 echo "KO 68577 makefile doesn't define R."
            exit 1
        fi
        mkdir -p r2r/html/${P}/${R}
#        echo "mv ${d}/* r2r/html/${w}/"
        mv ${d}/* r2r/html/${P}/${R}
    done
}

function mk_core {
    opt=$1
    for c0dir in $(find . -type d -name "core0"); do
        branddir=$(dirname $c0dir)
        brand=$(basename $branddir)
        hash=$(basename $(dirname $branddir))
        branch=$(basename $(dirname $(dirname $branddir)))
        cat << EOF
Building core:
    branddir=$branddir
    brand=$brand
    hash=$hash
    branch=$branch
    arch=$arch
    jobs=$jobs
EOF
        pushd "$branddir" >/dev/null
            pushd core0/us >/dev/null
                ############
                # make distr
                ############
                strset="en-uk"
                . res/strings/$strset
                if [[ -f res/strings/${strset}.ovr ]]; then
                    . res/strings/${strset}.ovr
                fi
                ${make} -j${jobs} CXX="$CXX" distr
                if [[ $? -ne 0 ]]; then
                    >&2 echo "KO 59400 Errors occurred."
                    exit 1
                fi

                ###########
                # this arch
                ###########
                cp distr/bin/apply_blob ../../
                cp distr/bin/install_blob ../../
                if [[ ! -f distr/lib/shenv ]]; then
                    >&2 echo "KO 59401 Expected file core0/us/distr/lib/shenv."
                    exit 1
                fi
                mv distr/lib/shenv /tmp/
                mkdir -p ${arch}-dev
                mv distr/include ${arch}-dev/
                mv distr/lib ${arch}-dev/
                mkdir distr/lib
                mv /tmp/shenv distr/lib/
                mv distr $arch

                ###############
                # Symlink archs
                ###############
                var="symlink_${arch}"
                echo "var=$var"
                sla=${!var}
                echo "sla >>>${sla}<<<"
                for x in $sla; do
                    echo "symlink ${arch} ${x}"
                    echo "symlink ${arch}-dev ${x}-dev"
                    ln -s ${arch} ${x}
                    ln -s ${arch}-dev ${x}-dev
                done
                tar -czf ${arch}.tgz ${arch} ${sla}
                echo "produced ${arch}.tgz in $(pwd)"
                sladev="${sla// /-dev }"
                echo "sladev >>>${sladev}<<<"
                tar -czf ${arch}-dev.tgz ${arch}-dev ${sladev}
                echo "produced ${arch}-dev.tgz in $(pwd)"
                for x in ${sla}; do
                    ln -s ${arch}.tgz ${x}.tgz
                    ln -s ${arch}-dev.tgz ${x}-dev.tgz
                done
                #/#############

            popd > /dev/null

            ###############
            # Collect archs
            ###############
            mv core0/us/${arch}.tgz .
            mv core0/us/${arch}-dev.tgz .
            var="symlink_${arch}"
            sla=${!var}
            for x in ${sla}; do
                mv core0/us/${x}.tgz .
                mv core0/us/${x}-dev.tgz .
            done

            ################
            # R2R core1 make
            ################
            mkdir -p r2r/${arch}
            pushd core1/us/trader > /dev/null
                echo "making core1 distr for arch $arch brand $brand."
                ${make} -j${jobs} CXX="${CXX}"
                if [[ $? -ne 0 ]]; then
                    >&2 echo "KO 91273 c1 make failed"
                    exit 1
                fi
            popd >/dev/null

            ################
            # R2R core2 make
            ################
            if [[ -d core2/us/trader ]]; then
                pushd core2/us/trader > /dev/null
                    echo "making core2 distr for arch $arch brand $brand."
                    ${make} -j${jobs} CXX="${CXX}"
                    if [[ $? -ne 0 ]]; then
                        >&2 echo "KO 72293 c2 make failed"
                        exit 1
                    fi
                popd >/dev/null
            fi

            ###########
            # this arch
            ###########
            for f in $(find core1/us/trader -maxdepth 1 -type f -name "*.so"); do
                mv $f r2r/${arch}/
            done
            if [[ -d core2/us/trader ]]; then
                for f in $(find core2/us/trader -maxdepth 1 -type f -name "*.so"); do
                    mv $f r2r/${arch}/
                done
            fi

            ###############
            # Symlink archs
            ###############
            pushd r2r > /dev/null
                var="symlink_${arch}"
                sla=${!var}
                for x in $(echo $sla); do
                    ln -s ${arch} ${x}
                done
            popd > /dev/null

            ##########
            # R2R data
            ##########
            mvr2rdata core0/us/wallet/trader
            mvr2rdata core1/us/trader
            if [[ -d core2/us/trader ]]; then
                mvr2rdata core2/us/trader
            fi
            #/########

            rm -rf core0
            rm -rf core1
            rm -rf core2
        popd >/dev/null
    done
    rm -rf ec_src
    rm -rf fcgi_src
    rm -f make.sh
    rm -rf lib
    mv build_hashes build_hashes_$arch
#    echo "files here:"
#    find .

#files here:
#.
#./build_hashes_x86_64
#./alpha-53
#./alpha-53/7-bd7f2d
#./alpha-53/7-bd7f2d/tft
#./alpha-53/7-bd7f2d/tft/apply_blob
#./alpha-53/7-bd7f2d/tft/x86_64.tgz
#./alpha-53/7-bd7f2d/tft/brand_sha256sum
#./alpha-53/7-bd7f2d/tft/x86_64-dev.tgz
#./alpha-53/7-bd7f2d/tft/makefile_distr
#./alpha-53/7-bd7f2d/tft/r2r
#./alpha-53/7-bd7f2d/tft/r2r/html
#./alpha-53/7-bd7f2d/tft/r2r/x86_64
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libworkflow-consumer.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libworkflow-logistics.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-pat2slt-slt.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-pat2slt-pat.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-fan2club-club.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-bid2ask-ask.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libworkflow-organization.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-bid2ask-bid.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-fan2club-fan.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-pat2phy-phy.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libworkflow-healthcare.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-games-player.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-pat2ai-pat.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-fan2fan-fan.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-pat2ai-ai.so
#./alpha-53/7-bd7f2d/tft/r2r/x86_64/libtrader-pat2phy-pat.so
#./alpha-53/7-bd7f2d/tft/r2r/home
#./alpha-53/7-bd7f2d/tft/r2r/home/bid2ask
#./alpha-53/7-bd7f2d/tft/r2r/home/bid2ask/ask
#./alpha-53/7-bd7f2d/tft/r2r/home/bid2ask/ask/ico.png
#./alpha-53/7-bd7f2d/tft/r2r/home/bid2ask/ask/name
#./alpha-53/7-bd7f2d/tft/r2r/home/bid2ask/bid
#./alpha-53/7-bd7f2d/tft/r2r/home/bid2ask/bid/ico.png
#./alpha-53/7-bd7f2d/tft/r2r/home/bid2ask/bid/name
#./alpha-53/7-bd7f2d/tft/r2r/home/fan2fan
#./alpha-53/7-bd7f2d/tft/r2r/home/fan2fan/ico.png
#./alpha-53/7-bd7f2d/tft/r2r/home/fan2fan/name
#./alpha-53/7-bd7f2d/tft/r2r/home/w2w
#./alpha-53/7-bd7f2d/tft/r2r/home/w2w/ico.png
#./alpha-53/7-bd7f2d/tft/r2r/home/w2w/name
#./alpha-53/7-bd7f2d/tft/r2r/home/a2a
#./alpha-53/7-bd7f2d/tft/r2r/home/a2a/ico.png
#./alpha-53/7-bd7f2d/tft/r2r/home/a2a/name
#./alpha-53/7-bd7f2d/tft/r2r/home/games
#./alpha-53/7-bd7f2d/tft/r2r/home/games/ico.png
#./alpha-53/7-bd7f2d/tft/r2r/home/games/name
#./alpha-53/7-bd7f2d/tft/install_blob
#./alpha-53/7-bd7f2d/sha256sum

}

function mk_android {
    check_android_sdk
    if [[ ! -d ~/us_sdk_deps ]]; then
        mkdir ~/us_sdk_deps
        pushd ~/us_sdk_deps >/dev/null
            mkdir libs_spongy
            pushd libs_spongy >/dev/null
                wget http://search.maven.org/remotecontent?filepath=com/madgag/spongycastle/core/1.58.0.0/core-1.58.0.0.jar -O core-1.58.0.0.jar
                wget http://search.maven.org/remotecontent?filepath=com/madgag/spongycastle/prov/1.58.0.0/prov-1.58.0.0.jar -O prov-1.58.0.0.jar
                wget http://search.maven.org/remotecontent?filepath=com/madgag/spongycastle/pkix/1.54.0.0/pkix-1.54.0.0.jar -O pkix-1.54.0.0.jar
                wget http://search.maven.org/remotecontent?filepath=com/madgag/spongycastle/pg/1.54.0.0/pg-1.54.0.0.jar -O pg-1.54.0.0.jar
    	    popd >/dev/null
            mkdir libs_bouncy
            pushd libs_bouncy >/dev/null
                wget https://www.bouncycastle.org/download/bcprov-jdk15on-164.jar -O bcprov-jdk15on-164.jar
                wget https://www.bouncycastle.org/download/bcpkix-jdk15on-164.jar -O bcpkix-jdk15on-164.jar
                wget https://www.bouncycastle.org/download/bcpg-jdk15on-164.jar -O bcpg-jdk15on-164.jar
                wget https://www.bouncycastle.org/download/bctls-jdk15on-164.jar -O bctls-jdk15on-164.jar
                wget https://www.bouncycastle.org/download/bcmail-jdk15on-164.jar -O bcmail-jdk15on-164.jar
            popd >/dev/null
        popd >/dev/null
    fi
    for c0dir in $(find . -type d -name "core0"); do
        pushd "$c0dir/us/sdk/wallet/java" >/dev/null
            rm -rf libs_spongy
            rm -rf libs_bouncy
            ln -s ~/us_sdk_deps/libs_spongy
            ln -s ~/us_sdk_deps/libs_bouncy
        popd >/dev/null
    done
    for c0dir in $(find . -type d -name "core0"); do
        branddir=$(dirname $c0dir)
        brand=$(basename $branddir)
        hash=$(basename $(dirname $branddir)) #package hash
        branch=$(basename $(dirname $(dirname $branddir)))
        cat << EOF
Building Android app:
    branddir=$branddir
    brand=$brand
    hash=$hash
    branch=$branch
    jobs=$jobs
EOF
        pushd "$branddir" > /dev/null
            pushd core0/us > /dev/null
                echo "SDK"
                pushd sdk/wallet/java >/dev/null
                    ${make} -j$jobs
                    if [[ $? -ne 0 ]]; then
                        >&2 echo "KO 72693 java sdk make failed"
                        exit 1
                    fi
                popd >/dev/null
                strset="en-uk"
                . res/strings/$strset
                if [[ -f res/strings/${strset}.ovr ]]; then
                    echo "found override string set"
                    . res/strings/${strset}.ovr
                fi
                pushd android >/dev/null
                    ln -s ~/android_sdk
                    ./make.sh
                    if [[ $? -ne 0 ]]; then
                        echo "Build failed. Trying again..."
                        sleep 2
                        ./make.sh
                        if [[ $? -ne 0 ]]; then
                            >&2 echo "KO 10996 Android app build failed."
                            exit 1
                        fi
                    fi
                    rm android_sdk
                popd >/dev/null
                . vcs_git_env
                cp sdk/wallet/java/$brand-sdk_bc.jar ../../${brand}-sdk_java_bc_${branch}_${hash}.jar
                cp sdk/wallet/java/$brand-sdk_sc.jar ../../${brand}-sdk_java_sc_${branch}_${hash}.jar
                if [[ -f android/app/build/outputs/apk/release/output-release-unsigned.apk ]]; then
                    mv android/app/build/outputs/apk/release/output-release-unsigned.apk ../../$brand-wallet_android_${branch}_${hash}-unsigned.apk
                fi
                if [[ -f android/app/build/outputs/apk/debug/output-debug-unsigned.apk ]]; then
                    mv android/app/build/outputs/apk/debug/output-debug-unsigned.apk ../../$brand-wallet_android_dbg_${branch}_${hash}-unsigned.apk
                fi
            popd >/dev/null
            rm core0 -rf
            rm core1 -rf
            rm core2 -rf
            rm -f makefile_distr
        popd >/dev/null
    done
    rm -f make.sh
    rm -rf ec_src
    rm -rf fcgi_src
    rm -rf lib
}

if [[ "_$cmd" == "_deps" ]]; then
    mk_deps
    exit 0
fi

if [[ "_$cmd" == "_core" ]]; then
    mk_core "$1"
    exit 0
fi

if [[ "_$cmd" == "_android" ]]; then
    mk_android
    exit 0
fi

>&2 echo "KO 52001 $cmd"
exit 1

