//===-                           P L E B B L E
//===-                         https://plebble.us
//===-
//===-              Copyright (C) 2017-2022 root1m3@plebble.us
//===-
//===-                      GNU GENERAL PUBLIC LICENSE
//===-                       Version 3, 29 June 2007
//===-
//===-    This program is free software: you can redistribute it and/or modify
//===-    it under the terms of the GPLv3 License as published by the Free
//===-    Software Foundation.
//===-
//===-    This program is distributed in the hope that it will be useful,
//===-    but WITHOUT ANY WARRANTY; without even the implied warranty of
//===-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//===-
//===-    You should have received a copy of the General Public License
//===-    along with this program, see LICENCE file.
//===-    see https://www.gnu.org/licenses
//===-
//===----------------------------------------------------------------------------
//===-
package us.gov.engine;
import us.gov.io.blob_reader_t;                                                                // blob_reader_t
import us.gov.io.blob_writer_t;                                                                // blob_writer_t
import us.CFG;                                                                                 // CFG
import us.gov.socket.datagram;                                                                 // datagram
import static us.gov.crypto.ripemd160.hash_t;                                                  // hash_t
import static us.gov.id.types.*;                                                               // *
import static us.gov.io.types.*;                                                               // *
import static us.gov.socket.types.*;                                                           // *
import static us.ko.*;                                                                         // *
import us.ko;                                                                                  // ko
import us.pair;                                                                                // pair
import java.io.PrintStream;                                                                    // PrintStream
import us.gov.protocol;                                                                        // protocol
import java.security.PublicKey;                                                                // PublicKey
import java.net.Socket;                                                                        // Socket
import us.string;                                                                              // string

public class rpc_peer_t extends us.gov.dfs.rpc_peer_t implements caller_api {

    static void log(final String line) {                        //--strip
        CFG.log_gov("engine.rpc_peer_t: " + line);              //--strip
    }                                                           //--strip

    public rpc_peer_t(rpc_daemon_t rpc_daemon) {
        super(rpc_daemon);
    }

    public rpc_peer_t(rpc_daemon_t rpc_daemon, Socket sock) {
        super(rpc_daemon, sock);
    }

    @Override public ko authorizeX(final PublicKey pub, final pin_t pin) { return ko.ok; }

    public svc_t translate_svc(svc_t svc, boolean inbound) {
        if (inbound) {
            rpc_daemon_t.svcfish.from_prev(svc);
        }
        else {
            rpc_daemon_t.svcfish.to_prev(svc);
        }
        log("Using API versioning translator. newsvc " + svc.value);  //--strip
        return svc;    
    }

    @Override public boolean process_work(datagram d) {
        log("process_work" + d.service.value); //--strip
        /// Assuming the following svc ordering:
        /// master definition: us/api/model.cpp
        /// static_assert(socket_end <= id_end);
        /// static_assert(id_end <= auth_end);
        /// static_assert(auth_end <= peer_end);
        /// static_assert(peer_end <= relay_end);
        /// static_assert(relay_end <= dfs_end);
        /// static_assert(dfs_end <= engine_end);
        /// static_assert(engine_end <= cash_end);
        /// static_assert(cash_end <= engine_auth_end);
        /// static_assert(engine_auth_end <= traders_end);
        /// static_assert(traders_end <= sys_end);
        if (d.service.value < protocol.net_daemon_end) {
            log("processing net_daemon datagram " + d.service.value); //--strip
            return super.process_work(d);
        }
        return false;
    }

    //OFF#include <us/api/generated/gov/java/engine/cllr_rpc-impl>
    //OFF#include <us/api/generated/gov/java/engine_auth/cllr_rpc-impl>
    //OFF#include <us/api/generated/gov/java/cash/cllr_rpc-impl>
    //#include <us/api/generated/gov/java/traders/cllr_rpc-impl>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/gov/java/traders/cllr_rpc-impl>
    @Override public ko call_wallets(vector_hash wallets) {
        log("wallets "); //--strip
        datagram d_in;
        {
            string lasterr = new string();
            pair<ko, datagram> r = sendrecv(blob_writer_t.get_datagram(daemon.channel, new svc_t(protocol.traders_wallets), new seq_t(0)), lasterr);
            if (ko.is_ko(r.first)) {
                assert r.second == null;
                if (lasterr.value != null) {
                    lasterror.set(lasterr.value);
                }
                else {
                    lasterror.set("");
                }
                return r.first;
            }
            assert r.second != null;
            d_in = r.second;
        }
        if (d_in.service.value != protocol.traders_wallets_response) {
            ko r = KO_50143;
            log(r.msg + "expected " + protocol.traders_wallets_response + " got " + d_in.service.value); //--strip
            return r;
        }
        ko r = blob_reader_t.readD(d_in, wallets);
        return r;
    }

    @Override public ko call_lookup_wallet(final hash_t pkh, lookup_wallet_out_dst_t o_out) {
        log("lookup_wallet "); //--strip
        /// out:
        ///    uint32_t net_addr;
        ///    uint16_t port;

        datagram d_in;
        {
            string lasterr = new string();
            pair<ko, datagram> r = sendrecv(blob_writer_t.get_datagram(daemon.channel, new svc_t(protocol.traders_lookup_wallet), new seq_t(0), pkh), lasterr);
            if (ko.is_ko(r.first)) {
                assert r.second == null;
                if (lasterr.value != null) {
                    lasterror.set(lasterr.value);
                }
                else {
                    lasterror.set("");
                }
                return r.first;
            }
            assert r.second != null;
            d_in = r.second;
        }
        if (d_in.service.value != protocol.traders_lookup_wallet_response) {
            ko r = KO_50143;
            log(r.msg + "expected " + protocol.traders_lookup_wallet_response + " got " + d_in.service.value); //--strip
            return r;
        }
        ko r = blob_reader_t.readD(d_in, o_out);
        return r;
    }

    @Override public ko call_random_wallet(random_wallet_out_dst_t o_out) {
        log("random_wallet "); //--strip
        /// out:
        ///    hash_t addr;
        ///    uint32_t net_addr;
        ///    uint16_t port;

        datagram d_in;
        {
            string lasterr = new string();
            pair<ko, datagram> r = sendrecv(blob_writer_t.get_datagram(daemon.channel, new svc_t(protocol.traders_random_wallet), new seq_t(0)), lasterr);
            if (ko.is_ko(r.first)) {
                assert r.second == null;
                if (lasterr.value != null) {
                    lasterror.set(lasterr.value);
                }
                else {
                    lasterror.set("");
                }
                return r.first;
            }
            assert r.second != null;
            d_in = r.second;
        }
        if (d_in.service.value != protocol.traders_random_wallet_response) {
            ko r = KO_50143;
            log(r.msg + "expected " + protocol.traders_random_wallet_response + " got " + d_in.service.value); //--strip
            return r;
        }
        ko r = blob_reader_t.readD(d_in, o_out);
        return r;
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //OFF#include <us/api/generated/gov/java/sys/cllr_rpc-impl>

    @Override public void dump(final String prefix, PrintStream os) {
        os.println(prefix + "engine::rpc_peer_t");
        super.dump(prefix, os);
    }

}

