//===-                           P L E B B L E
//===-                         https://plebble.us
//===-
//===-              Copyright (C) 2017-2022 root1m3@plebble.us
//===-
//===-                      GNU GENERAL PUBLIC LICENSE
//===-                       Version 3, 29 June 2007
//===-
//===-    This program is free software: you can redistribute it and/or modify
//===-    it under the terms of the GPLv3 License as published by the Free
//===-    Software Foundation.
//===-
//===-    This program is distributed in the hope that it will be useful,
//===-    but WITHOUT ANY WARRANTY; without even the implied warranty of
//===-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//===-
//===-    You should have received a copy of the General Public License
//===-    along with this program, see LICENCE file.
//===-    see https://www.gnu.org/licenses
//===-
//===----------------------------------------------------------------------------
//===-
package us.gov.auth;
import us.gov.io.blob_reader_t;                                                                // blob_reader_t
import us.gov.io.blob_writer_t;                                                                // blob_writer_t
import us.CFG;                                                                                 // CFG
import us.gov.socket.datagram;                                                                 // datagram
import static us.gov.socket.types.*;                                                           // *
import us.gov.id.types.*;                                                                      // *
import us.ko;                                                                                  // ko
import java.io.PrintStream;                                                                    // PrintStream
import us.gov.protocol;                                                                        // protocol
import java.security.PublicKey;                                                                // PublicKey
import java.net.Socket;                                                                        // Socket

public abstract class peer_t extends us.gov.id.peer_t implements api {

    static void log(final String line) {                                          //--strip
        CFG.log_gov_auth("peer_t: " + line);                                      //--strip
    }                                                                             //--strip

    public enum stage_t {
        denied,
        authorized,
        num_stages;

        public short asShort() {
            return (short)ordinal();
        }
        public static stage_t fromShort(short i) {
            return stage_t.values()[i];
        }
    };

    public String[] stagestr = {"denied", "authorized"};

    public peer_t(rpc_daemon_t rpc_daemon) {
        super(rpc_daemon);
    }

    public peer_t(rpc_daemon_t rpc_daemon, Socket sock) {
        super(rpc_daemon, sock);
    }

    @Override public void verification_completed(final pport_t rpport, final pin_t pin) {
        if (!verification_is_fine()) {
            return;
        }
        ko r = authorizeX(pubkey, pin);
        if (ko.is_ko(r)) {
            return;
        }
        stage = stage_t.authorized;
    }

    public abstract ko authorizeX(final PublicKey pub, final pin_t pin);

    @Override public boolean process_work(datagram d) {
        switch (d.service.value) {
            //#include <us/api/generated/gov/java/auth/hdlr_svc-router>
            //------------------------------------------------------------__begin__------generated by configure, do not edit.
            //content of file: <us/api/generated/gov/java/auth/hdlr_svc-router>
            // auth - master file: us/api/data/gov/auth

            case protocol.auth_f1: { return process_async_api__auth_f1(d); }
            //-/----------------------------------------------------------___end___------generated by configure, do not edit.
        }
        return super.process_work(d);
    }

    //#include <us/api/generated/gov/java/auth/hdlr_svc_handler-impl>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/gov/java/auth/hdlr_svc_handler-impl>
    // auth - master file: us/api/data/gov/auth

    boolean process_async_api__auth_f1(datagram d) {
        log("protocol.auth_f1"); //--strip
        {
            ko r = handle_f1();
            if (ko.is_ko(r)) {
                process_ko_work(d.decode_channel(), d.decode_sequence(), r);
                return true; //processed
            }
        }
        return true; //processed
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.

    //------------------apitool - API Spec defined @ us/api/generated/gov/java/auth/hdlr_local-impl

    @Override public ko handle_f1() {
        log("f1 "); //--strip
        // Implement here.

        return KO_10210;
    }

    //-/----------------apitool - End of API implementation.

    //#include <us/api/generated/gov/java/auth/cllr_rpc-impl>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/gov/java/auth/cllr_rpc-impl>
    @Override public ko call_f1() {
        log("f1 "); //--strip
        return send1(blob_writer_t.get_datagram(daemon.channel, new svc_t(protocol.auth_f1), new seq_t(0)));
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.

    @Override public void dump(final String prefix, PrintStream os) {
        os.println(prefix + "auth::peer_t: idle(recv) ");
        super.dump(prefix, os);
    }

    public stage_t stage = stage_t.denied;

}


