//===-                           P L E B B L E
//===-                         https://plebble.us
//===-
//===-              Copyright (C) 2017-2022 root1m3@plebble.us
//===-
//===-                      GNU GENERAL PUBLIC LICENSE
//===-                       Version 3, 29 June 2007
//===-
//===-    This program is free software: you can redistribute it and/or modify
//===-    it under the terms of the GPLv3 License as published by the Free
//===-    Software Foundation.
//===-
//===-    This program is distributed in the hope that it will be useful,
//===-    but WITHOUT ANY WARRANTY; without even the implied warranty of
//===-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//===-
//===-    You should have received a copy of the General Public License
//===-    along with this program, see LICENCE file.
//===-    see https://www.gnu.org/licenses
//===-
//===----------------------------------------------------------------------------
//===-
package us.wallet.engine;
import java.util.ArrayList;                                                                    // ArrayList
import us.gov.io.blob_reader_t;                                                                // blob_reader_t
import us.gov.io.blob_writer_t;                                                                // blob_writer_t
import us.wallet.trader.bookmark_info_t;                                                       // bookmark_info_t
import us.wallet.trader.bookmarks_t;                                                           // bookmarks_t
import us.wallet.trader.bookmark_t;                                                            // bookmark_t
import us.gov.socket.datagram;                                                                 // datagram
import us.wallet.trader.endpoint_t;                                                            // endpoint_t
import static us.gov.crypto.ripemd160.hash_t;                                                  // hash_t
import static us.gov.crypto.types.*;                                                           // *
import static us.gov.io.types.*;                                                               // *
import static us.gov.socket.types.*;                                                           // *
import static us.stdint.*;                                                                     // *
import static us.tuple.*;                                                                      // *
import us.ko;                                                                                  // ko
import static us.ko.ok;                                                                        // ok
import us.wallet.protocol;                                                                     // protocol
import us.wallet.trader.protocol_selection_t;                                                  // protocol_selection_t
import java.security.PublicKey;                                                                // PublicKey
import us.wallet.trader.qr_t;                                                                  // qr_t
import us.gov.crypto.sha256;                                                                   // sha256
import us.string;                                                                              // string

public interface dto {

    //#include <us/api/generated/wallet/java/engine/cllr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/engine/cllr_dto-hdr>
    // engine - master file: us/api/data/wallet/engine


    /// get_component_update - IN
    public static final class get_component_update_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public get_component_update_in_t(final string brandcode, final string component, final string vcsname) {
            this.brandcode = brandcode;
            this.component = component;
            this.vcsname = vcsname;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(brandcode) +
                blob_writer_t.blob_size(component) +
                blob_writer_t.blob_size(vcsname);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(brandcode);
            writer.write(component);
            writer.write(vcsname);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.engine_get_component_update), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final string brandcode, final string component, final string vcsname) {
            get_component_update_in_t o = new get_component_update_in_t(brandcode, component, vcsname);
            return o.get_datagram(channel, seq);
        }

        final string brandcode;
        final string component;
        final string vcsname;
    }

    public static final class get_component_update_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public get_component_update_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(vcsname);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(bin_pkg);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public string vcsname = new string();
        public bin_t bin_pkg = new bin_t();
    }

    /// get_component_hash - IN
    public static final class get_component_hash_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public get_component_hash_in_t(final string component, final string filename) {
            this.component = component;
            this.filename = filename;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(component) +
                blob_writer_t.blob_size(filename);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(component);
            writer.write(filename);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.engine_get_component_hash), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final string component, final string filename) {
            get_component_hash_in_t o = new get_component_hash_in_t(component, filename);
            return o.get_datagram(channel, seq);
        }

        final string component;
        final string filename;
    }

    /// harvest - IN
    public static final class harvest_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public harvest_in_t(final uint16_t id, final uint16_t timeout, final uint16_t decay, final priv_t priv) {
            this.id = id;
            this.timeout = timeout;
            this.decay = decay;
            this.priv = priv;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(id) +
                blob_writer_t.blob_size(timeout) +
                blob_writer_t.blob_size(decay) +
                blob_writer_t.blob_size(priv);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(id);
            writer.write(timeout);
            writer.write(decay);
            writer.write(priv);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.engine_harvest), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final uint16_t id, final uint16_t timeout, final uint16_t decay, final priv_t priv) {
            harvest_in_t o = new harvest_in_t(id, timeout, decay, priv);
            return o.get_datagram(channel, seq);
        }

        final uint16_t id;
        final uint16_t timeout;
        final uint16_t decay;
        final priv_t priv;
    }

    public static final class lookup_wallet_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public lookup_wallet_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(net_addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(port);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public uint32_t net_addr = new uint32_t();
        public uint16_t port = new uint16_t();
    }

    public static final class random_wallet_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public random_wallet_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(net_addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(port);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public uint32_t net_addr = new uint32_t();
        public uint16_t port = new uint16_t();
    }

    /// conf - IN
    public static final class conf_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public conf_in_t(final string key, final string value) {
            this.key = key;
            this.value = value;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(key) +
                blob_writer_t.blob_size(value);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(key);
            writer.write(value);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.engine_conf), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final string key, final string value) {
            conf_in_t o = new conf_in_t(key, value);
            return o.get_datagram(channel, seq);
        }

        final string key;
        final string value;
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //#include <us/api/generated/wallet/java/engine/hdlr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/engine/hdlr_dto-hdr>
    // engine - master file: us/api/data/wallet/engine


    public static final class get_component_update_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public get_component_update_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(brandcode);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(component);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(vcsname);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public string brandcode = new string();
        public string component = new string();
        public string vcsname = new string();
    }

    /// get_component_update - OUT
    public static final class get_component_update_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public get_component_update_out_t() {}
        public get_component_update_out_t(final string vcsname, final bin_t bin_pkg) {
            this.vcsname = vcsname;
            this.bin_pkg = bin_pkg;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(vcsname) +
                blob_writer_t.blob_size(bin_pkg);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(vcsname);
            writer.write(bin_pkg);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.engine_get_component_update_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final string vcsname, final bin_t bin_pkg) {
            get_component_update_out_t o = new get_component_update_out_t(vcsname, bin_pkg);
            return o.get_datagram(channel, seq);
        }

        public string vcsname;
        public bin_t bin_pkg;
    }

    public static final class get_component_hash_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public get_component_hash_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(component);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(filename);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public string component = new string();
        public string filename = new string();
    }

    public static final class harvest_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public harvest_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(id);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(timeout);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(decay);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(priv);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public uint16_t id = new uint16_t();
        public uint16_t timeout = new uint16_t();
        public uint16_t decay = new uint16_t();
        public priv_t priv = new priv_t();
    }

    /// lookup_wallet - OUT
    public static final class lookup_wallet_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public lookup_wallet_out_t() {}
        public lookup_wallet_out_t(final uint32_t net_addr, final uint16_t port) {
            this.net_addr = net_addr;
            this.port = port;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(net_addr) +
                blob_writer_t.blob_size(port);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(net_addr);
            writer.write(port);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.engine_lookup_wallet_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final uint32_t net_addr, final uint16_t port) {
            lookup_wallet_out_t o = new lookup_wallet_out_t(net_addr, port);
            return o.get_datagram(channel, seq);
        }

        public uint32_t net_addr;
        public uint16_t port;
    }

    /// random_wallet - OUT
    public static final class random_wallet_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public random_wallet_out_t() {}
        public random_wallet_out_t(final hash_t addr, final uint32_t net_addr, final uint16_t port) {
            this.addr = addr;
            this.net_addr = net_addr;
            this.port = port;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(net_addr) +
                blob_writer_t.blob_size(port);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(net_addr);
            writer.write(port);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.engine_random_wallet_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final uint32_t net_addr, final uint16_t port) {
            random_wallet_out_t o = new random_wallet_out_t(addr, net_addr, port);
            return o.get_datagram(channel, seq);
        }

        public hash_t addr;
        public uint32_t net_addr;
        public uint16_t port;
    }

    public static final class conf_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public conf_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(key);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(value);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public string key = new string();
        public string value = new string();
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //#include <us/api/generated/wallet/java/pairing/cllr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/pairing/cllr_dto-hdr>
    // pairing - master file: us/api/data/wallet/pairing


    /// pair_device - IN
    public static final class pair_device_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public pair_device_in_t(final pub_t pub, final string subhome, final string name) {
            this.pub = pub;
            this.subhome = subhome;
            this.name = name;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(pub) +
                blob_writer_t.blob_size(subhome) +
                blob_writer_t.blob_size(name);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(pub);
            writer.write(subhome);
            writer.write(name);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.pairing_pair_device), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final pub_t pub, final string subhome, final string name) {
            pair_device_in_t o = new pair_device_in_t(pub, subhome, name);
            return o.get_datagram(channel, seq);
        }

        final pub_t pub;
        final string subhome;
        final string name;
    }

    /// prepair_device - IN
    public static final class prepair_device_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public prepair_device_in_t(final uint16_t pin, final string subhome, final string name) {
            this.pin = pin;
            this.subhome = subhome;
            this.name = name;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(pin) +
                blob_writer_t.blob_size(subhome) +
                blob_writer_t.blob_size(name);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(pin);
            writer.write(subhome);
            writer.write(name);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.pairing_prepair_device), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final uint16_t pin, final string subhome, final string name) {
            prepair_device_in_t o = new prepair_device_in_t(pin, subhome, name);
            return o.get_datagram(channel, seq);
        }

        final uint16_t pin;
        final string subhome;
        final string name;
    }

    public static final class prepair_device_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public prepair_device_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(pin);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(subhome);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public uint16_t pin = new uint16_t();
        public string subhome = new string();
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //#include <us/api/generated/wallet/java/pairing/hdlr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/pairing/hdlr_dto-hdr>
    // pairing - master file: us/api/data/wallet/pairing


    public static final class pair_device_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public pair_device_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(pub);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(subhome);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(name);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public pub_t pub = new pub_t();
        public string subhome = new string();
        public string name = new string();
    }

    public static final class prepair_device_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public prepair_device_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(pin);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(subhome);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(name);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public uint16_t pin = new uint16_t();
        public string subhome = new string();
        public string name = new string();
    }

    /// prepair_device - OUT
    public static final class prepair_device_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public prepair_device_out_t() {}
        public prepair_device_out_t(final uint16_t pin, final string subhome) {
            this.pin = pin;
            this.subhome = subhome;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(pin) +
                blob_writer_t.blob_size(subhome);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(pin);
            writer.write(subhome);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.pairing_prepair_device_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final uint16_t pin, final string subhome) {
            prepair_device_out_t o = new prepair_device_out_t(pin, subhome);
            return o.get_datagram(channel, seq);
        }

        public uint16_t pin;
        public string subhome;
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //#include <us/api/generated/wallet/java/r2r/cllr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/r2r/cllr_dto-hdr>
    // r2r - master file: us/api/data/wallet/r2r


    /// trading_msg - IN
    public static final class trading_msg_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public trading_msg_in_t(final hash_t tid, final uint16_t code, final bin_t payload) {
            this.tid = tid;
            this.code = code;
            this.payload = payload;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(tid) +
                blob_writer_t.blob_size(code) +
                blob_writer_t.blob_size(payload);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(tid);
            writer.write(code);
            writer.write(payload);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.r2r_trading_msg), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t tid, final uint16_t code, final bin_t payload) {
            trading_msg_in_t o = new trading_msg_in_t(tid, code, payload);
            return o.get_datagram(channel, seq);
        }

        final hash_t tid;
        final uint16_t code;
        final bin_t payload;
    }

    /// trading_msg2 - IN
    public static final class trading_msg2_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public trading_msg2_in_t(final uint64_t route, final hash_t tid, final uint16_t code, final bin_t payload) {
            this.route = route;
            this.tid = tid;
            this.code = code;
            this.payload = payload;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(route) +
                blob_writer_t.blob_size(tid) +
                blob_writer_t.blob_size(code) +
                blob_writer_t.blob_size(payload);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(route);
            writer.write(tid);
            writer.write(code);
            writer.write(payload);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.r2r_trading_msg2), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final uint64_t route, final hash_t tid, final uint16_t code, final bin_t payload) {
            trading_msg2_in_t o = new trading_msg2_in_t(route, tid, code, payload);
            return o.get_datagram(channel, seq);
        }

        final uint64_t route;
        final hash_t tid;
        final uint16_t code;
        final bin_t payload;
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //#include <us/api/generated/wallet/java/r2r/hdlr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/r2r/hdlr_dto-hdr>
    // r2r - master file: us/api/data/wallet/r2r


    public static final class trading_msg_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public trading_msg_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(tid);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(code);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(payload);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t tid = new hash_t();
        public uint16_t code = new uint16_t();
        public bin_t payload = new bin_t();
    }

    public static final class trading_msg2_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public trading_msg2_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(route);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(tid);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(code);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(payload);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public uint64_t route = new uint64_t();
        public hash_t tid = new hash_t();
        public uint16_t code = new uint16_t();
        public bin_t payload = new bin_t();
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //#include <us/api/generated/wallet/java/wallet/cllr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/wallet/cllr_dto-hdr>
    // wallet - master file: us/api/data/wallet/wallet


    /// transfer - IN
    public static final class transfer_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public transfer_in_t(final hash_t addr, final int64_t amount, final hash_t coin, final uint8_t relay) {
            this.addr = addr;
            this.amount = amount;
            this.coin = coin;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(amount) +
                blob_writer_t.blob_size(coin) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(amount);
            writer.write(coin);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_transfer), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final int64_t amount, final hash_t coin, final uint8_t relay) {
            transfer_in_t o = new transfer_in_t(addr, amount, coin, relay);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final int64_t amount;
        final hash_t coin;
        final uint8_t relay;
    }

    /// transfer_from - IN
    public static final class transfer_from_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public transfer_from_in_t(final hash_t src_addr, final hash_t rcpt_addr, final int64_t amount, final hash_t coin, final uint8_t relay) {
            this.src_addr = src_addr;
            this.rcpt_addr = rcpt_addr;
            this.amount = amount;
            this.coin = coin;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(src_addr) +
                blob_writer_t.blob_size(rcpt_addr) +
                blob_writer_t.blob_size(amount) +
                blob_writer_t.blob_size(coin) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(src_addr);
            writer.write(rcpt_addr);
            writer.write(amount);
            writer.write(coin);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_transfer_from), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t src_addr, final hash_t rcpt_addr, final int64_t amount, final hash_t coin, final uint8_t relay) {
            transfer_from_in_t o = new transfer_from_in_t(src_addr, rcpt_addr, amount, coin, relay);
            return o.get_datagram(channel, seq);
        }

        final hash_t src_addr;
        final hash_t rcpt_addr;
        final int64_t amount;
        final hash_t coin;
        final uint8_t relay;
    }

    /// tx_charge_pay - IN
    public static final class tx_charge_pay_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public tx_charge_pay_in_t(final hash_t addr, final int64_t samount, final hash_t scoin, final int64_t ramount, final hash_t rcoin) {
            this.addr = addr;
            this.samount = samount;
            this.scoin = scoin;
            this.ramount = ramount;
            this.rcoin = rcoin;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(samount) +
                blob_writer_t.blob_size(scoin) +
                blob_writer_t.blob_size(ramount) +
                blob_writer_t.blob_size(rcoin);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(samount);
            writer.write(scoin);
            writer.write(ramount);
            writer.write(rcoin);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_tx_charge_pay), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final int64_t samount, final hash_t scoin, final int64_t ramount, final hash_t rcoin) {
            tx_charge_pay_in_t o = new tx_charge_pay_in_t(addr, samount, scoin, ramount, rcoin);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final int64_t samount;
        final hash_t scoin;
        final int64_t ramount;
        final hash_t rcoin;
    }

    /// invoice_verify - IN
    public static final class invoice_verify_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public invoice_verify_in_t(final blob_t blob_ev, final int64_t oamount, final hash_t ocoin, final int64_t iamount, final hash_t icoin) {
            this.blob_ev = blob_ev;
            this.oamount = oamount;
            this.ocoin = ocoin;
            this.iamount = iamount;
            this.icoin = icoin;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(oamount) +
                blob_writer_t.blob_size(ocoin) +
                blob_writer_t.blob_size(iamount) +
                blob_writer_t.blob_size(icoin);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(oamount);
            writer.write(ocoin);
            writer.write(iamount);
            writer.write(icoin);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_invoice_verify), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final int64_t oamount, final hash_t ocoin, final int64_t iamount, final hash_t icoin) {
            invoice_verify_in_t o = new invoice_verify_in_t(blob_ev, oamount, ocoin, iamount, icoin);
            return o.get_datagram(channel, seq);
        }

        final blob_t blob_ev;
        final int64_t oamount;
        final hash_t ocoin;
        final int64_t iamount;
        final hash_t icoin;
    }

    /// payment_verify - IN
    public static final class payment_verify_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public payment_verify_in_t(final blob_t blob_ev, final int64_t oamount, final hash_t ocoin, final int64_t iamount, final hash_t icoin) {
            this.blob_ev = blob_ev;
            this.oamount = oamount;
            this.ocoin = ocoin;
            this.iamount = iamount;
            this.icoin = icoin;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(oamount) +
                blob_writer_t.blob_size(ocoin) +
                blob_writer_t.blob_size(iamount) +
                blob_writer_t.blob_size(icoin);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(oamount);
            writer.write(ocoin);
            writer.write(iamount);
            writer.write(icoin);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_payment_verify), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final int64_t oamount, final hash_t ocoin, final int64_t iamount, final hash_t icoin) {
            payment_verify_in_t o = new payment_verify_in_t(blob_ev, oamount, ocoin, iamount, icoin);
            return o.get_datagram(channel, seq);
        }

        final blob_t blob_ev;
        final int64_t oamount;
        final hash_t ocoin;
        final int64_t iamount;
        final hash_t icoin;
    }

    /// tx_pay - IN
    public static final class tx_pay_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public tx_pay_in_t(final blob_t blob_ev, final uint8_t relay) {
            this.blob_ev = blob_ev;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_tx_pay), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final uint8_t relay) {
            tx_pay_in_t o = new tx_pay_in_t(blob_ev, relay);
            return o.get_datagram(channel, seq);
        }

        final blob_t blob_ev;
        final uint8_t relay;
    }

    /// tx_add_section - IN
    public static final class tx_add_section_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public tx_add_section_in_t(final blob_t blob_ev, final hash_t coin) {
            this.blob_ev = blob_ev;
            this.coin = coin;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(coin);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(coin);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_tx_add_section), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final hash_t coin) {
            tx_add_section_in_t o = new tx_add_section_in_t(blob_ev, coin);
            return o.get_datagram(channel, seq);
        }

        final blob_t blob_ev;
        final hash_t coin;
    }

    /// tx_add_input - IN
    public static final class tx_add_input_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public tx_add_input_in_t(final blob_t blob_ev, final uint16_t section, final hash_t addr, final int64_t amount) {
            this.blob_ev = blob_ev;
            this.section = section;
            this.addr = addr;
            this.amount = amount;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(section) +
                blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(amount);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(section);
            writer.write(addr);
            writer.write(amount);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_tx_add_input), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final uint16_t section, final hash_t addr, final int64_t amount) {
            tx_add_input_in_t o = new tx_add_input_in_t(blob_ev, section, addr, amount);
            return o.get_datagram(channel, seq);
        }

        final blob_t blob_ev;
        final uint16_t section;
        final hash_t addr;
        final int64_t amount;
    }

    /// tx_add_output - IN
    public static final class tx_add_output_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public tx_add_output_in_t(final blob_t blob_ev, final uint16_t section, final hash_t addr, final int64_t amount) {
            this.blob_ev = blob_ev;
            this.section = section;
            this.addr = addr;
            this.amount = amount;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(section) +
                blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(amount);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(section);
            writer.write(addr);
            writer.write(amount);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_tx_add_output), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final uint16_t section, final hash_t addr, final int64_t amount) {
            tx_add_output_in_t o = new tx_add_output_in_t(blob_ev, section, addr, amount);
            return o.get_datagram(channel, seq);
        }

        final blob_t blob_ev;
        final uint16_t section;
        final hash_t addr;
        final int64_t amount;
    }

    /// tx_sign - IN
    public static final class tx_sign_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public tx_sign_in_t(final blob_t blob_ev, final blob_t blob_sigcode) {
            this.blob_ev = blob_ev;
            this.blob_sigcode = blob_sigcode;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(blob_sigcode);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(blob_sigcode);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_tx_sign), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final blob_t blob_sigcode) {
            tx_sign_in_t o = new tx_sign_in_t(blob_ev, blob_sigcode);
            return o.get_datagram(channel, seq);
        }

        final blob_t blob_ev;
        final blob_t blob_sigcode;
    }

    /// set_supply - IN
    public static final class set_supply_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public set_supply_in_t(final hash_t addr, final int64_t amount, final uint8_t relay) {
            this.addr = addr;
            this.amount = amount;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(amount) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(amount);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_set_supply), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final int64_t amount, final uint8_t relay) {
            set_supply_in_t o = new set_supply_in_t(addr, amount, relay);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final int64_t amount;
        final uint8_t relay;
    }

    /// store_kv - IN
    public static final class store_kv_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public store_kv_in_t(final hash_t addr, final string key, final string value, final uint8_t relay) {
            this.addr = addr;
            this.key = key;
            this.value = value;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(key) +
                blob_writer_t.blob_size(value) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(key);
            writer.write(value);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_store_kv), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final string key, final string value, final uint8_t relay) {
            store_kv_in_t o = new store_kv_in_t(addr, key, value, relay);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final string key;
        final string value;
        final uint8_t relay;
    }

    /// rm_kv - IN
    public static final class rm_kv_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public rm_kv_in_t(final hash_t addr, final string key, final uint8_t relay) {
            this.addr = addr;
            this.key = key;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(key) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(key);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_rm_kv), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final string key, final uint8_t relay) {
            rm_kv_in_t o = new rm_kv_in_t(addr, key, relay);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final string key;
        final uint8_t relay;
    }

    /// store_file - IN
    public static final class store_file_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public store_file_in_t(final hash_t addr, final string path, final blob_t content, final uint8_t relay) {
            this.addr = addr;
            this.path = path;
            this.content = content;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(path) +
                blob_writer_t.blob_size(content) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(path);
            writer.write(content);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_store_file), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final string path, final blob_t content, final uint8_t relay) {
            store_file_in_t o = new store_file_in_t(addr, path, content, relay);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final string path;
        final blob_t content;
        final uint8_t relay;
    }

    public static final class store_file_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public store_file_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(path);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(digest);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public string path = new string();
        public hash_t digest = new hash_t();
    }

    /// rm_file - IN
    public static final class rm_file_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public rm_file_in_t(final hash_t addr, final string path, final hash_t digest, final uint8_t relay) {
            this.addr = addr;
            this.path = path;
            this.digest = digest;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(path) +
                blob_writer_t.blob_size(digest) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(path);
            writer.write(digest);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_rm_file), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final string path, final hash_t digest, final uint8_t relay) {
            rm_file_in_t o = new rm_file_in_t(addr, path, digest, relay);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final string path;
        final hash_t digest;
        final uint8_t relay;
    }

    /// search - IN
    public static final class search_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public search_in_t(final hash_t addr, final string pattern) {
            this.addr = addr;
            this.pattern = pattern;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(pattern);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(pattern);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_search), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final string pattern) {
            search_in_t o = new search_in_t(addr, pattern);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final string pattern;
    }

    public static final class net_info_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public net_info_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(wallet_address);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(subhome);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(seeds);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t wallet_address = new hash_t();
        public string subhome = new string();
        public vector_tuple_hash_host_port seeds = new vector_tuple_hash_host_port();
    }

    /// compilance_report - IN
    public static final class compilance_report_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public compilance_report_in_t(final string jurisdiction, final string date_from, final string date_to) {
            this.jurisdiction = jurisdiction;
            this.date_from = date_from;
            this.date_to = date_to;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(jurisdiction) +
                blob_writer_t.blob_size(date_from) +
                blob_writer_t.blob_size(date_to);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(jurisdiction);
            writer.write(date_from);
            writer.write(date_to);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_compilance_report), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final string jurisdiction, final string date_from, final string date_to) {
            compilance_report_in_t o = new compilance_report_in_t(jurisdiction, date_from, date_to);
            return o.get_datagram(channel, seq);
        }

        final string jurisdiction;
        final string date_from;
        final string date_to;
    }

    public static final class priv_key_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public priv_key_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(pub);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public pub_t pub = new pub_t();
        public hash_t addr = new hash_t();
    }

    public static final class pub_key_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public pub_key_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(pub);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public pub_t pub = new pub_t();
        public hash_t addr = new hash_t();
    }

    public static final class gen_keys_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public gen_keys_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(priv);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(pub);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public priv_t priv = new priv_t();
        public pub_t pub = new pub_t();
        public hash_t addr = new hash_t();
    }

    /// sign - IN
    public static final class sign_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public sign_in_t(final bin_t msg, final priv_t priv) {
            this.msg = msg;
            this.priv = priv;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(msg) +
                blob_writer_t.blob_size(priv);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(msg);
            writer.write(priv);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_sign), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final bin_t msg, final priv_t priv) {
            sign_in_t o = new sign_in_t(msg, priv);
            return o.get_datagram(channel, seq);
        }

        final bin_t msg;
        final priv_t priv;
    }

    public static final class sign_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public sign_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(pub);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(sig);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public pub_t pub = new pub_t();
        public sig_t sig = new sig_t();
    }

    /// verify - IN
    public static final class verify_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public verify_in_t(final bin_t msg, final pub_t pub, final sig_t sig) {
            this.msg = msg;
            this.pub = pub;
            this.sig = sig;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(msg) +
                blob_writer_t.blob_size(pub) +
                blob_writer_t.blob_size(sig);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(msg);
            writer.write(pub);
            writer.write(sig);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_verify), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final bin_t msg, final pub_t pub, final sig_t sig) {
            verify_in_t o = new verify_in_t(msg, pub, sig);
            return o.get_datagram(channel, seq);
        }

        final bin_t msg;
        final pub_t pub;
        final sig_t sig;
    }

    /// encrypt - IN
    public static final class encrypt_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public encrypt_in_t(final bin_t msg, final priv_t src_priv, final pub_t rcpt_pub) {
            this.msg = msg;
            this.src_priv = src_priv;
            this.rcpt_pub = rcpt_pub;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(msg) +
                blob_writer_t.blob_size(src_priv) +
                blob_writer_t.blob_size(rcpt_pub);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(msg);
            writer.write(src_priv);
            writer.write(rcpt_pub);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_encrypt), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final bin_t msg, final priv_t src_priv, final pub_t rcpt_pub) {
            encrypt_in_t o = new encrypt_in_t(msg, src_priv, rcpt_pub);
            return o.get_datagram(channel, seq);
        }

        final bin_t msg;
        final priv_t src_priv;
        final pub_t rcpt_pub;
    }

    /// decrypt - IN
    public static final class decrypt_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public decrypt_in_t(final bin_t msg_scrambled, final pub_t src_pub, final priv_t rcpt_priv) {
            this.msg_scrambled = msg_scrambled;
            this.src_pub = src_pub;
            this.rcpt_priv = rcpt_priv;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(msg_scrambled) +
                blob_writer_t.blob_size(src_pub) +
                blob_writer_t.blob_size(rcpt_priv);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(msg_scrambled);
            writer.write(src_pub);
            writer.write(rcpt_priv);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_decrypt), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final bin_t msg_scrambled, final pub_t src_pub, final priv_t rcpt_priv) {
            decrypt_in_t o = new decrypt_in_t(msg_scrambled, src_pub, rcpt_priv);
            return o.get_datagram(channel, seq);
        }

        final bin_t msg_scrambled;
        final pub_t src_pub;
        final priv_t rcpt_priv;
    }

    /// patch_os - IN
    public static final class patch_os_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public patch_os_in_t(final string script, final priv_t groot_key, final uint8_t relay) {
            this.script = script;
            this.groot_key = groot_key;
            this.relay = relay;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(script) +
                blob_writer_t.blob_size(groot_key) +
                blob_writer_t.blob_size(relay);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(script);
            writer.write(groot_key);
            writer.write(relay);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_patch_os), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final string script, final priv_t groot_key, final uint8_t relay) {
            patch_os_in_t o = new patch_os_in_t(script, groot_key, relay);
            return o.get_datagram(channel, seq);
        }

        final string script;
        final priv_t groot_key;
        final uint8_t relay;
    }

    public static final class patch_os_out_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_out_hdr (2)

        public patch_os_out_dst_t() {}

        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(job);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public hash_t job = new hash_t();
    }

    /// trade - IN
    public static final class trade_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public trade_in_t(final hash_t parent_trade, final string datasubdir, final blob_t qr) {
            this.parent_trade = parent_trade;
            this.datasubdir = datasubdir;
            this.qr = qr;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(parent_trade) +
                blob_writer_t.blob_size(datasubdir) +
                blob_writer_t.blob_size(qr);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(parent_trade);
            writer.write(datasubdir);
            writer.write(qr);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_trade), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t parent_trade, final string datasubdir, final blob_t qr) {
            trade_in_t o = new trade_in_t(parent_trade, datasubdir, qr);
            return o.get_datagram(channel, seq);
        }

        final hash_t parent_trade;
        final string datasubdir;
        final blob_t qr;
    }

    /// exec_trade - IN
    public static final class exec_trade_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public exec_trade_in_t(final hash_t tid, final string cmd) {
            this.tid = tid;
            this.cmd = cmd;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(tid) +
                blob_writer_t.blob_size(cmd);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(tid);
            writer.write(cmd);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_exec_trade), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t tid, final string cmd) {
            exec_trade_in_t o = new exec_trade_in_t(tid, cmd);
            return o.get_datagram(channel, seq);
        }

        final hash_t tid;
        final string cmd;
    }

    /// bookmark_add - IN
    public static final class bookmark_add_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public bookmark_add_in_t(final string name, final bookmark_t bookmark) {
            this.name = name;
            this.bookmark = bookmark;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(name) +
                blob_writer_t.blob_size(bookmark);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(name);
            writer.write(bookmark);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_bookmark_add), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final string name, final bookmark_t bookmark) {
            bookmark_add_in_t o = new bookmark_add_in_t(name, bookmark);
            return o.get_datagram(channel, seq);
        }

        final string name;
        final bookmark_t bookmark;
    }

    /// timeseries_show - IN
    public static final class timeseries_show_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public timeseries_show_in_t(final hash_t addr, final uint64_t ts) {
            this.addr = addr;
            this.ts = ts;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(ts);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(ts);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_timeseries_show), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final uint64_t ts) {
            timeseries_show_in_t o = new timeseries_show_in_t(addr, ts);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final uint64_t ts;
    }

    /// timeseries_new - IN
    public static final class timeseries_new_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public timeseries_new_in_t(final hash_t addr, final uint8_t monotonic) {
            this.addr = addr;
            this.monotonic = monotonic;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(monotonic);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(monotonic);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_timeseries_new), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final uint8_t monotonic) {
            timeseries_new_in_t o = new timeseries_new_in_t(addr, monotonic);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final uint8_t monotonic;
    }

    /// timeseries_add - IN
    public static final class timeseries_add_in_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_in_hdr (1)

        public timeseries_add_in_t(final hash_t addr, final bin_t payload) {
            this.addr = addr;
            this.payload = payload;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(addr) +
                blob_writer_t.blob_size(payload);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(addr);
            writer.write(payload);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_timeseries_add), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t addr, final bin_t payload) {
            timeseries_add_in_t o = new timeseries_add_in_t(addr, payload);
            return o.get_datagram(channel, seq);
        }

        final hash_t addr;
        final bin_t payload;
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.
    //#include <us/api/generated/wallet/java/wallet/hdlr_dto-hdr>
    //------------------------------------------------------------__begin__------generated by configure, do not edit.
    //content of file: <us/api/generated/wallet/java/wallet/hdlr_dto-hdr>
    // wallet - master file: us/api/data/wallet/wallet


    public static final class transfer_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public transfer_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(amount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(coin);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public int64_t amount = new int64_t();
        public hash_t coin = new hash_t();
        public uint8_t relay = new uint8_t();
    }

    public static final class transfer_from_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public transfer_from_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(src_addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(rcpt_addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(amount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(coin);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t src_addr = new hash_t();
        public hash_t rcpt_addr = new hash_t();
        public int64_t amount = new int64_t();
        public hash_t coin = new hash_t();
        public uint8_t relay = new uint8_t();
    }

    public static final class tx_charge_pay_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public tx_charge_pay_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(samount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(scoin);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(ramount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(rcoin);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public int64_t samount = new int64_t();
        public hash_t scoin = new hash_t();
        public int64_t ramount = new int64_t();
        public hash_t rcoin = new hash_t();
    }

    public static final class invoice_verify_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public invoice_verify_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(oamount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(ocoin);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(iamount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(icoin);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public int64_t oamount = new int64_t();
        public hash_t ocoin = new hash_t();
        public int64_t iamount = new int64_t();
        public hash_t icoin = new hash_t();
    }

    public static final class payment_verify_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public payment_verify_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(oamount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(ocoin);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(iamount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(icoin);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public int64_t oamount = new int64_t();
        public hash_t ocoin = new hash_t();
        public int64_t iamount = new int64_t();
        public hash_t icoin = new hash_t();
    }

    public static final class tx_pay_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public tx_pay_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public uint8_t relay = new uint8_t();
    }

    public static final class tx_add_section_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public tx_add_section_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(coin);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public hash_t coin = new hash_t();
    }

    public static final class tx_add_input_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public tx_add_input_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(section);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(amount);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public uint16_t section = new uint16_t();
        public hash_t addr = new hash_t();
        public int64_t amount = new int64_t();
    }

    public static final class tx_add_output_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public tx_add_output_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(section);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(amount);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public uint16_t section = new uint16_t();
        public hash_t addr = new hash_t();
        public int64_t amount = new int64_t();
    }

    public static final class tx_sign_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public tx_sign_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(blob_ev);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(blob_sigcode);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public blob_t blob_ev = new blob_t();
        public blob_t blob_sigcode = new blob_t();
    }

    public static final class set_supply_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public set_supply_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(amount);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public int64_t amount = new int64_t();
        public uint8_t relay = new uint8_t();
    }

    public static final class store_kv_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public store_kv_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(key);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(value);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public string key = new string();
        public string value = new string();
        public uint8_t relay = new uint8_t();
    }

    public static final class rm_kv_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public rm_kv_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(key);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public string key = new string();
        public uint8_t relay = new uint8_t();
    }

    public static final class store_file_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public store_file_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(path);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(content);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public string path = new string();
        public blob_t content = new blob_t();
        public uint8_t relay = new uint8_t();
    }

    /// store_file - OUT
    public static final class store_file_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public store_file_out_t() {}
        public store_file_out_t(final blob_t blob_ev, final string path, final hash_t digest) {
            this.blob_ev = blob_ev;
            this.path = path;
            this.digest = digest;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(path) +
                blob_writer_t.blob_size(digest);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(path);
            writer.write(digest);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_store_file_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final string path, final hash_t digest) {
            store_file_out_t o = new store_file_out_t(blob_ev, path, digest);
            return o.get_datagram(channel, seq);
        }

        public blob_t blob_ev;
        public string path;
        public hash_t digest;
    }

    public static final class rm_file_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public rm_file_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(path);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(digest);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public string path = new string();
        public hash_t digest = new hash_t();
        public uint8_t relay = new uint8_t();
    }

    public static final class search_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public search_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(pattern);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public string pattern = new string();
    }

    /// net_info - OUT
    public static final class net_info_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public net_info_out_t() {}
        public net_info_out_t(final hash_t wallet_address, final string subhome, final vector_tuple_hash_host_port seeds) {
            this.wallet_address = wallet_address;
            this.subhome = subhome;
            this.seeds = seeds;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(wallet_address) +
                blob_writer_t.blob_size(subhome) +
                blob_writer_t.blob_size(seeds);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(wallet_address);
            writer.write(subhome);
            writer.write(seeds);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_net_info_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final hash_t wallet_address, final string subhome, final vector_tuple_hash_host_port seeds) {
            net_info_out_t o = new net_info_out_t(wallet_address, subhome, seeds);
            return o.get_datagram(channel, seq);
        }

        public hash_t wallet_address;
        public string subhome;
        public vector_tuple_hash_host_port seeds;
    }

    public static final class compilance_report_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public compilance_report_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(jurisdiction);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(date_from);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(date_to);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public string jurisdiction = new string();
        public string date_from = new string();
        public string date_to = new string();
    }

    /// priv_key - OUT
    public static final class priv_key_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public priv_key_out_t() {}
        public priv_key_out_t(final pub_t pub, final hash_t addr) {
            this.pub = pub;
            this.addr = addr;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(pub) +
                blob_writer_t.blob_size(addr);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(pub);
            writer.write(addr);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_priv_key_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final pub_t pub, final hash_t addr) {
            priv_key_out_t o = new priv_key_out_t(pub, addr);
            return o.get_datagram(channel, seq);
        }

        public pub_t pub;
        public hash_t addr;
    }

    /// pub_key - OUT
    public static final class pub_key_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public pub_key_out_t() {}
        public pub_key_out_t(final pub_t pub, final hash_t addr) {
            this.pub = pub;
            this.addr = addr;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(pub) +
                blob_writer_t.blob_size(addr);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(pub);
            writer.write(addr);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_pub_key_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final pub_t pub, final hash_t addr) {
            pub_key_out_t o = new pub_key_out_t(pub, addr);
            return o.get_datagram(channel, seq);
        }

        public pub_t pub;
        public hash_t addr;
    }

    /// gen_keys - OUT
    public static final class gen_keys_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public gen_keys_out_t() {}
        public gen_keys_out_t(final priv_t priv, final pub_t pub, final hash_t addr) {
            this.priv = priv;
            this.pub = pub;
            this.addr = addr;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(priv) +
                blob_writer_t.blob_size(pub) +
                blob_writer_t.blob_size(addr);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(priv);
            writer.write(pub);
            writer.write(addr);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_gen_keys_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final priv_t priv, final pub_t pub, final hash_t addr) {
            gen_keys_out_t o = new gen_keys_out_t(priv, pub, addr);
            return o.get_datagram(channel, seq);
        }

        public priv_t priv;
        public pub_t pub;
        public hash_t addr;
    }

    public static final class sign_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public sign_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(msg);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(priv);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public bin_t msg = new bin_t();
        public priv_t priv = new priv_t();
    }

    /// sign - OUT
    public static final class sign_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public sign_out_t() {}
        public sign_out_t(final pub_t pub, final sig_t sig) {
            this.pub = pub;
            this.sig = sig;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(pub) +
                blob_writer_t.blob_size(sig);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(pub);
            writer.write(sig);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_sign_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final pub_t pub, final sig_t sig) {
            sign_out_t o = new sign_out_t(pub, sig);
            return o.get_datagram(channel, seq);
        }

        public pub_t pub;
        public sig_t sig;
    }

    public static final class verify_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public verify_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(msg);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(pub);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(sig);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public bin_t msg = new bin_t();
        public pub_t pub = new pub_t();
        public sig_t sig = new sig_t();
    }

    public static final class encrypt_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public encrypt_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(msg);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(src_priv);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(rcpt_pub);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public bin_t msg = new bin_t();
        public priv_t src_priv = new priv_t();
        public pub_t rcpt_pub = new pub_t();
    }

    public static final class decrypt_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public decrypt_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(msg_scrambled);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(src_pub);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(rcpt_priv);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public bin_t msg_scrambled = new bin_t();
        public pub_t src_pub = new pub_t();
        public priv_t rcpt_priv = new priv_t();
    }

    public static final class patch_os_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public patch_os_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(script);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(groot_key);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(relay);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public string script = new string();
        public priv_t groot_key = new priv_t();
        public uint8_t relay = new uint8_t();
    }

    /// patch_os - OUT
    public static final class patch_os_out_t extends blob_writer_t.writable {
        //source: coder_java.cpp::gen_dto_out_hdr (1)

        public patch_os_out_t() {}
        public patch_os_out_t(final blob_t blob_ev, final hash_t job) {
            this.blob_ev = blob_ev;
            this.job = job;
        }

        @Override public int blob_size() {
            return blob_writer_t.blob_size(blob_ev) +
                blob_writer_t.blob_size(job);
        }

        @Override public void to_blob(blob_writer_t writer) {
            writer.write(blob_ev);
            writer.write(job);
        }

        public datagram get_datagram(final channel_t channel, final seq_t seq) {
            return super.get_datagram(channel, new svc_t(protocol.wallet_patch_os_response), seq);
        }

        public static datagram get_datagram(final channel_t channel, final seq_t seq, final blob_t blob_ev, final hash_t job) {
            patch_os_out_t o = new patch_os_out_t(blob_ev, job);
            return o.get_datagram(channel, seq);
        }

        public blob_t blob_ev;
        public hash_t job;
    }

    public static final class trade_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public trade_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(parent_trade);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(datasubdir);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(qr);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t parent_trade = new hash_t();
        public string datasubdir = new string();
        public blob_t qr = new blob_t();
    }

    public static final class exec_trade_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public exec_trade_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(tid);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(cmd);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t tid = new hash_t();
        public string cmd = new string();
    }

    public static final class bookmark_add_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public bookmark_add_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(name);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(bookmark);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public string name = new string();
        public bookmark_t bookmark = new bookmark_t();
    }

    public static final class timeseries_show_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public timeseries_show_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(ts);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public uint64_t ts = new uint64_t();
    }

    public static final class timeseries_new_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public timeseries_new_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(monotonic);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public uint8_t monotonic = new uint8_t();
    }

    public static final class timeseries_add_in_dst_t extends blob_reader_t.readable {
        //source: coder_java.cpp::gen_dto_in_hdr (2)

        public timeseries_add_in_dst_t() {}


        @Override public ko from_blob(blob_reader_t reader) {
            {
                ko r = reader.read(addr);
                if (ko.is_ko(r)) return r;
            }
            {
                ko r = reader.read(payload);
                if (ko.is_ko(r)) return r;
            }
            return ok;
        }

        public hash_t addr = new hash_t();
        public bin_t payload = new bin_t();
    }
    //-/----------------------------------------------------------___end___------generated by configure, do not edit.

}

