#!/bin/bash
#===-                           P L E B B L E
#===-                         https://plebble.us
#===-
#===-              Copyright (C) 2017-2022 root1m3@plebble.us
#===-
#===-                      GNU GENERAL PUBLIC LICENSE
#===-                       Version 3, 29 June 2007
#===-
#===-    This program is free software: you can redistribute it and/or modify
#===-    it under the terms of the GPLv3 License as published by the Free
#===-    Software Foundation.
#===-
#===-    This program is distributed in the hope that it will be useful,
#===-    but WITHOUT ANY WARRANTY; without even the implied warranty of
#===-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#===-
#===-    You should have received a copy of the General Public License
#===-    along with this program, see LICENCE file.
#===-    see https://www.gnu.org/licenses
#===-
#===----------------------------------------------------------------------------
#===-
#If executed as root it also patches the operating system.

. lib/shenv

prog=$0

US="##str3##"
GOVUSER="##str11##"
ANDROID_BRANDID="##str56##"
defaultr2r="##str77##"
PREFIX=/usr/local
export USRHOME=/home/$GOVUSER

function help {
    echo "./$prog [--full-install] [--only-install-deps] [--jail <jaildir>] <command>"
    echo "Commands are:"
    echo "    install"
	echo "    r2r_lib_list_default"
	echo "    r2r_lib_install <e.g. bid2ask-bid>"
	echo "    r2r_lib_uninstall <prot-rol>"
	echo "    r2r_lib_commit"
    echo ""
    echo "default jaildir=\"\""
}

if [[ "_$arch" == "_" ]]; then
    >&2 echo "KO 50012 "
    exit 1
fi

full_install=1  #a29.18  $TODO: should be 0 got standard code updates that don't affect file structure but only binaries
echo "This release requires a full install"
let onlyinstalldeps=0

while [[ true ]]; do
    opt=$1
    shift
    if [[ "_$opt" == "_--full-install" ]]; then
        full_install=1
        continue
    elif [[ "_$opt" == "_--jail" ]]; then
        jaildir=$1
        shift
        continue
    elif [[ "_$opt" == "_--only-install-deps" ]]; then
        let onlyinstalldeps=1
        continue
    elif [[ _$opt == _--* ]]; then
        >&2 echo "KO 86755 Invalid option $opt"
        exit 1
    else
        break
    fi
done

cmd=$opt
if [[ "_$cmd" == "_" ]]; then
    cmd="install"
fi
JAILDIR=$jaildir

if [[ "_$JAILDIR" != "_" ]]; then
    JAILDIR=$(realpath $JAILDIR)
    echo "Installing in jail directory $JAILDIR"
fi

if [[ $EUID -ne 0 ]]; then
    if [[ "_$JAILDIR" == "_" ]]; then
       >&2 echo "KO 50174 This script must be run as root"
       exit 1
    fi
fi

tar="tar -I zstd"

pkg=$(pwd | sed "s~.*/\(.*\)~\1~")
blob_brand=$(echo $pkg | sed -n "s#^\([^_]*\)_\([^_]*\)_\([^_]*\).*#\1#p")
blob_branch=$(echo $pkg | sed -n "s#^\([^_]*\)_\([^_]*\)_\([^_]*\).*#\2#p")
blob_hash=$(echo $pkg | sed -n "s#^\([^_]*\)_\([^_]*\)_\([^_]*\).*#\3#p")
cat << EOF
    blob_brand $blob_brand
    blob_branch $blob_branch
    blob_hash $blob_hash
    channel $ch
EOF
US=$blob_brand
echo "US=$US"

function init_jail {
    echo "init_jail"
}

function touch_defaults {
    dst=$1
    US=$2
    mkdir -p ${JAILDIR}$dst
    for l in $defaultr2r; do
        touch ${JAILDIR}$dst/libtrader-${l}.so
    done
}

function touch_lib {
    dst=$1
    lib=$2
    if [[ ! -f lib/$arch/r2r/libtrader-${lib}.so ]]; then
        >&2 echo "KO 76025 file lib/$arch/r2r/libtrader-${lib}.so not found in blob."
        exit 1
    fi
    mkdir -p ${JAILDIR}$dst
    touch ${JAILDIR}$dst/libtrader-${lib}.so
    echo "touched file ${JAILDIR}$dst/libtrader-${lib}.so"
}

#function symlink_libdir {
#    US=$1
#    libdir=$2
#    dst=$3
#    echo "updating symlinks in $libdir"
#    mkdir -p $libdir
#    pushd $libdir > /dev/null
#        for l in `echo $defaultr2r`; do
#            if [[ ! -f libtrader-${l}.so ]]; then
#                echo "    NEW -> ${JAILDIR}$dst/libtrader-${l}.so"
#                ln -s ${JAILDIR}$dst/lib${US}trader-${l}.so
#            else
#                echo "    IGN-OK -> ${JAILDIR}$dst/lib${US}trader-${l}.so"
#            fi
#            echo -n "delete old symlinks: "
#            find . -maxdepth 1 -type f -name "lib${US}wallet-*" | xargs
#            rm lib${US}wallet-* -f
#        done
#    popd > /dev/null
#}

if [[ "_$blob_brand" != "_##str3##" ]]; then
    >&2 echo "KO 10923 Execute from inside package as bin/install"
    exit 1
fi

let install_deps=1
let install_r2r=1
#let install_guest_wallets_libs=1
let install_android_apk=1
let install_core=1

if [[ $onlyinstalldeps -eq 1 ]]; then
    let install_deps=1
    let install_r2r=0
    #let install_guest_wallets_libs=0
    let install_android_apk=0
    let install_core=0
fi

function do_upgrade_r2r__lib {
#    arch=`uname -m`
    #upgrade name wallet->trader
    #if [[ -d ${JAILDIR}$r2rdst ]]; then
    #    for f in `find ${JAILDIR}$r2rdst -name "*.so"`; do
    #        n=${f##*/}
    #        n2=`echo $n | sed "s/lib${US}wallet/lib${US}trader/"`
    #        if [[ "_$n2" != "_$n" ]]; then
    #            mv ${JAILDIR}$r2rdst/$n ${JAILDIR}$r2rdst/$n2
    #            echo "updated lib name ${JAILDIR}$r2rdst/$n -> ${JAILDIR}$r2rdst/$n2"
    #        fi
    #        echo "${JAILDIR}$r2rdst   --  $n  -- $arch"
    #    done
    #fi
    #touch_defaults $r2rdst $US

    #for f in `find . -name "*.tzst"`; do
    #    $tar -xf $f
    #done
    #update only existing r2r libraries
    if [[ ! -d ${JAILDIR}$r2rdst ]]; then
        return
    fi

    #renaming old libs with new naming convention. TODO remove after alpha-53
    for f in $(find ${JAILDIR}$r2rdst -name "lib${US}trader-*.so"); do
        n=${f##*/}
        echo $n | sed "s~lib${US}trader-.*-.*[\.-].*so~~"
        nn=$(echo "$n" | sed "s~lib${US}trader-\(.*\)~libtrader-\1~")
        if [[ "_$nn" != "_$n" ]]; then
            echo "filename Updated. filename convention: $n --> $nn"
            mv ${JAILDIR}$r2rdst/$n ${JAILDIR}$r2rdst/$nn
            n=$nn
        fi
    done

    for f in $(find ${JAILDIR}$r2rdst -name "libtrader-*.so"); do
        n=${f##*/}
        echo "${JAILDIR}$r2rdst   --  $n"

        if [[ ! -f $n ]]; then
            echo "Could not find $n in blob. Not updating this r2r lib."
            continue
        fi
        cp $n ${JAILDIR}$r2rdst/
#        pat="libtrader-\([^-]*\)-\([^-]*\)[-\.]\([^\.]*\)\.so"
        pat="libtrader-\([^-]*\)-\([^-]*\)\.so"
        prot=$(echo $n | sed "s#${pat}#\1#")
        role=$(echo $n | sed "s#${pat}#\2#")

        #workflows
        wfdeps=$(ldd $n | grep libworkflow | awk '{ print $1 }')
        for wf in $wfdeps; do
            echo "    Installing workflow $wf"
            if [[ ! -f $wf ]]; then
                >&2 echo "KO 49184 wokflow $wf not found in $(pwd). $n won't work."
                continue
            fi
            cp $wf ${JAILDIR}$r2rdst/
        done
        echo "    Installed $prot-$role lib at ${JAILDIR}$r2rdst"

        if [[ ! -d ../../../r2r/home/$prot/$role ]]; then
            pwd
            echo "    source r2r info dir ../../../r2r/home/$prot/$role doesn't exists."
            continue
        fi
        mkdir -p ${thome}/$prot/$role

        echo "Installing home data"
        if [[ ! -f ${thome}/$prot/$role/name ]]; then
            cp -r ../../../r2r/home/$prot/$role/* ${thome}/$prot/$role/
            echo "    created ${thome}/$prot/$role/"
        else
            echo "    Not overwriting existing ${thome}/$prot/$role/name."
        fi
        echo "Installing html data"
        if [[ ! -d ../../../r2r/html/$prot/$role ]]; then
            echo "    html for $prot/$role not available."
            continue
        fi
        mkdir -p /var/www/${brand}_html/$prot/$role
        cp -r ../../../r2r/html/$prot/$role/* /var/www/${brand}_html/$prot/$role/
        echo "    copied html for $prot/$role in /var/www/${brand}_html/$prot/$role"
    done
}

function touch_default_r2r_libs {
    thome=$1
    r2rdst="$thome/lib"
    mkdir -p $r2rdst
    if [[ $install_r2r -eq 0 ]]; then
#        >&2 echo "KO 58389 install_r2r flag is flipped shut."
        return
    fi
    echo "touch default R2R libs"
    if [[ ! -d lib/${arch}/r2r ]]; then
        >&2 echo "KO 58349 Unexpected. lib dir not found."
        return
    fi
    pushd lib/${arch}/r2r > /dev/null
        touch_defaults $r2rdst $US
    popd > /dev/null
}

function do_upgrade_r2r {
    thome=$1
    r2rdst="$thome/lib"
    mkdir -p $r2rdst
    if [[ $install_r2r -eq 0 ]]; then
        return
    fi
    echo "Installing R2R"
    if [[ ! -d lib ]]; then
        return
    fi
    if [[ ! -d lib/${arch}/r2r ]]; then
        >&2 echo "KO 58349 Unexpected. lib dir not found."
        return
    fi
    pushd lib/${arch}/r2r > /dev/null
        do_upgrade_r2r__lib
    popd > /dev/null
}

function do_upgrade {
    ch=$(cat $JAILDIR/var/us_nets | grep " $blob_brand " | awk '{print $1}')
    r=$?
    if [[ $r -ne 0 ]]; then
        >&2 echo "KO 97712 brand $blob_brand is not installed. Run ./$prog --full-install $JAILDIR"
        exit 1
    fi
    if [[ "_$ch" == "_" ]]; then
        >&2 echo "KO 97729 brand $blob_brand is not installed. ch=$ch"
        exit 1
    fi
    ushome="/home/$GOVUSER/.${US}"
    if [[ "_$ch" != "_0" ]]; then
        ushome="$ushome/$ch"
    fi
    whome="$ushome/wallet"
    thome="$whome/trader"
    mkdir -p $thome

    #-------------------R2R libs
    touch_default_r2r_libs $thome
    do_upgrade_r2r $thome

    #-------------------Android APK
    if [[ $install_android_apk -eq 1 ]]; then
        echo "Installing android app"
        component="android"
        if [[ -d wallet-cli ]]; then
            compdir=${JAILDIR}/home/${GOVUSER}/downloads/${component}
            apkdownload=${compdir}/${ANDROID_BRANDID}
            mkdir -p $apkdownload
            rm -f $apkdownload/*.apk
            rm -f $apkdownload/blobhash
            echo "files:"
            apksrc=$(find wallet-cli -type f -name "${US}-wallet_android*.apk")
            cp $apksrc $apkdownload/
            pushd $apkdownload > /dev/null
                ln -s $(basename $apksrc) blob.apk
            popd > /dev/null

            #cp wallet-cli/blobhash $apkdownload/
            echo -n $(basename $apksrc) > $apkdownload/blob_name
            echo "apk copied to $apkdownload/"
            find $apkdownload
        fi
    fi
    #-------------------CORE
    if [[ $install_core -eq 1 ]]; then
        echo "Installing core0"
        #$tar -xf core_${blob_branch}_${blob_hash}.tar.zst
        pushd core > /dev/null
            make JAILDIR="${JAILDIR}" install
            if [[ $? -ne 0 ]]; then
                >&2 echo "KO 30948 do_upgrade finishes with error." 
                return 1
            fi
        popd > /dev/null
    fi
    #-----------------------

    #-------------------DOC
    mkdir -p ${JAILDIR}${PREFIX}/share/doc/${US}
    install doc/release_notes ${JAILDIR}${PREFIX}/share/doc/${US}/
    #-------------------

    echo "finished do_upgrade" 
    return 0
}

function do_install {
    #-------------------deps (ec)
    if [[ $install_deps -eq 1 ]]; then
        echo "Installing deps (libsecp256k1, fastcgi++)"
        pushd deps > /dev/null
            ./install_deps ${JAILDIR}
        popd > /dev/null
    fi

    #-------------------core - system-base
    #corepkg=`find . -type f -name "core*.zst"`
    #$tar -xf $corepkg
    pushd core > /dev/null
        make JAILDIR="${JAILDIR}" install-system-base
    popd > /dev/null
    #rm -rf core
}

if [[ "_${JAILDIR}" != "_" ]]; then
    init_jail
fi

if [[ "_$cmd" == "_install" ]]; then
    if [[ $full_install -eq 0 ]]; then
        if [[ ! -f $JAILDIR/etc/systemd/system/${US}-gov.service ]]; then
            echo "essential files are missing. Doing full install."
            full_install=1
        fi
    fi

    if [[ $full_install -eq 1 ]]; then
        do_install
        if [[ $? -ne 0 ]]; then
            >&2 echo "KO 50398 Install failed"
            exit 1
        fi
    fi

    do_upgrade
    if [[ $? -ne 0 ]]; then
        >&2 echo "KO 50399 Upgrade failed"
        exit 1
    fi
    exit 0
fi

if [[ "_$cmd" == "_r2r_lib_list_default" ]]; then
    echo "libs installed by default:"
    echo ${defaultr2r}
    exit 0
fi

if [[ "_$cmd" == "_r2r_lib_install" ]]; then
    echo "Installing R2R lib"
    lib=$1
    shift
    #arch=`uname -m`
    if [[ ! -f lib/$arch/r2r/libtrader-${lib}.so ]]; then
        >&2 echo "KO 76095 file lib/$arch/r2r/libtrader-${lib}.so not found in blob."
        exit 1
    fi
    ch=$(cat $JAILDIR/var/us_nets | grep " $US " | awk '{print $1}')
    r=$?
    if [[ $r -ne 0 ]]; then
        >&2 echo "KO 92752 brand $US is not installed."
        exit 1
    fi
    if [[ "_$ch" == "_" ]]; then
        >&2 echo "KO 92749 brand $US is not installed. ch=$ch"
        exit 1
    fi
    ushome="/home/$GOVUSER/.${US}"
    if [[ "_$ch" != "_0" ]]; then
        ushome="$ushome/$ch"
    fi
    whome="$ushome/wallet"
    thome="$whome/trader"
    r2rdst="$thome/lib"
    mkdir -p $r2rdst
    touch_lib $r2rdst ${lib}
    echo "commit is required to complete."
    exit 0
fi

if [[ "_$cmd" == "_r2r_lib_uninstall" ]]; then
    prosel=$1
    shift
    echo "Uninstalling R2R lib $lib"
    if [[ ! -f lib/$arch/r2r/libtrader-${prosel}.so ]]; then
        >&2 echo "KO 76095 file lib/$arch/r2r/libtrader-${prosel}.so not found."
        exit 1
    fi
    ch=$(cat $JAILDIR/var/us_nets | grep " $US " | awk '{print $1}')
    r=$?
    if [[ $r -ne 0 ]]; then
        >&2 echo "KO 94752 brand $US is not installed."
        exit 1
    fi
    if [[ "_$ch" == "_" ]]; then
        >&2 echo "KO 94749 brand $US is not installed."
        exit 1
    fi
    ushome="/home/$GOVUSER/.${US}"
    if [ "_$ch" != "_0" ]; then
        ushome="$ushome/$ch"
    fi
    whome="$ushome/wallet"
    thome="$whome/trader"
    r2rdst="$thome/lib"
    echo "deleted file $r2rdst/libtrader-${prosel}.so"
    rm -f $r2rdst/libtrader-${prosel}.so
    echo "${prosel} deleted. commit is required to complete."
    exit 0
fi

if [[ "_$cmd" == "_r2r_lib_commit" ]]; then
    ch=$(cat $JAILDIR/var/us_nets | grep " $blob_brand " | awk '{print $1}')
    r=$?
    if [[ $r -ne 0 ]]; then
        >&2 echo "KO 97752 brand $blob_brand is not installed. Run ./$prog --full-install $JAILDIR  "
        exit 1
    fi
    if [[ "_$ch" == "_" ]]; then
        >&2 echo "KO 97749 brand $blob_brand is not installed."
        exit 1
    fi
    ushome="/home/$GOVUSER/.${US}"
    if [[ "_$ch" != "_0" ]]; then
        ushome="$ushome/$ch"
    fi
    whome="$ushome/wallet"
    thome="$whome/trader"

    #-------------------R2R libs
    do_upgrade_r2r $thome
    echo "REQUIRED: systemctl restart ${US}-wallet"
    exit 0
fi

help
echo >&2 "KO 78632 invalid command $cmd"
exit 1

